{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww37900\viewh21300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!DOCTYPE html>\
<html lang="en">\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <title>AI Crossword Generator</title>\
    <style>\
        * \{\
            margin: 0;\
            padding: 0;\
            box-sizing: border-box;\
        \}\
\
        body \{\
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\
            min-height: 100vh;\
            padding: 20px;\
        \}\
\
        .container \{\
            max-width: 1200px;\
            margin: 0 auto;\
            background: rgba(255, 255, 255, 0.95);\
            border-radius: 20px;\
            padding: 30px;\
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\
        \}\
\
        h1 \{\
            text-align: center;\
            color: #333;\
            margin-bottom: 30px;\
            font-size: 2.5em;\
            font-weight: 300;\
        \}\
\
        .section \{\
            margin-bottom: 40px;\
            padding: 20px;\
            background: #f8f9fa;\
            border-radius: 15px;\
            border-left: 5px solid #667eea;\
        \}\
\
        .section h2 \{\
            color: #667eea;\
            margin-bottom: 15px;\
            font-size: 1.5em;\
        \}\
\
        .controls \{\
            display: grid;\
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\
            gap: 20px;\
            margin-bottom: 20px;\
        \}\
\
        .control-group \{\
            display: flex;\
            flex-direction: column;\
        \}\
\
        label \{\
            font-weight: 600;\
            margin-bottom: 5px;\
            color: #555;\
        \}\
\
        input, select, textarea \{\
            padding: 12px;\
            border: 2px solid #e0e0e0;\
            border-radius: 8px;\
            font-size: 16px;\
            transition: border-color 0.3s ease;\
        \}\
\
        input:focus, select:focus, textarea:focus \{\
            outline: none;\
            border-color: #667eea;\
        \}\
\
        button \{\
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\
            color: white;\
            border: none;\
            padding: 15px 30px;\
            border-radius: 25px;\
            font-size: 16px;\
            font-weight: 600;\
            cursor: pointer;\
            transition: transform 0.2s ease, box-shadow 0.2s ease;\
        \}\
\
        button:hover \{\
            transform: translateY(-2px);\
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\
        \}\
\
        button:disabled \{\
            opacity: 0.6;\
            cursor: not-allowed;\
            transform: none;\
        \}\
\
        .crossword-grid \{\
            display: grid;\
            grid-template-columns: repeat(15, 30px);\
            grid-template-rows: repeat(15, 30px);\
            gap: 1px;\
            justify-content: center;\
            margin: 20px 0;\
            background: #333;\
            padding: 10px;\
            border-radius: 10px;\
        \}\
\
        .grid-cell \{\
            width: 30px;\
            height: 30px;\
            background: white;\
            border: 1px solid #ccc;\
            display: flex;\
            align-items: center;\
            justify-content: center;\
            font-weight: bold;\
            font-size: 12px;\
            position: relative;\
        \}\
\
        .grid-cell.black \{\
            background: #333;\
        \}\
\
        .grid-cell.numbered::before \{\
            content: attr(data-number);\
            position: absolute;\
            top: 1px;\
            left: 2px;\
            font-size: 8px;\
            font-weight: bold;\
            color: #667eea;\
        \}\
\
        .clues \{\
            display: grid;\
            grid-template-columns: 1fr 1fr;\
            gap: 30px;\
        \}\
\
        .clue-section \{\
            background: white;\
            padding: 20px;\
            border-radius: 10px;\
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\
        \}\
\
        .clue-section h3 \{\
            color: #667eea;\
            margin-bottom: 15px;\
            font-size: 1.3em;\
        \}\
\
        .clue-item \{\
            margin-bottom: 10px;\
            padding: 8px;\
            background: #f8f9fa;\
            border-radius: 5px;\
            border-left: 3px solid #667eea;\
        \}\
\
        .status \{\
            padding: 15px;\
            border-radius: 10px;\
            margin: 10px 0;\
            text-align: center;\
            font-weight: 600;\
        \}\
\
        .status.loading \{\
            background: #fff3cd;\
            color: #856404;\
        \}\
\
        .status.success \{\
            background: #d4edda;\
            color: #155724;\
        \}\
\
        .status.error \{\
            background: #f8d7da;\
            color: #721c24;\
        \}\
\
        .api-info \{\
            background: #e3f2fd;\
            padding: 15px;\
            border-radius: 10px;\
            margin-bottom: 20px;\
        \}\
\
        .code-block \{\
            background: #2d3748;\
            color: #e2e8f0;\
            padding: 20px;\
            border-radius: 10px;\
            font-family: 'Courier New', monospace;\
            font-size: 14px;\
            line-height: 1.5;\
            overflow-x: auto;\
            margin: 15px 0;\
        \}\
\
        .workflow-step \{\
            background: white;\
            padding: 15px;\
            margin: 10px 0;\
            border-radius: 10px;\
            border-left: 4px solid #667eea;\
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\
        \}\
\
        .workflow-step h4 \{\
            color: #667eea;\
            margin-bottom: 10px;\
        \}\
    </style>\
</head>\
<body>\
    <div class="container">\
        <h1>\uc0\u55358 \u56809  AI Crossword Generator</h1>\
        \
        <div class="section">\
            <h2>\uc0\u55357 \u56615  Configuration</h2>\
            <div class="api-info">\
                <strong>Setup Required:</strong> This demo shows the interface. For full functionality, you'll need:\
                <ul style="margin: 10px 0 0 20px;">\
                    <li>n8n instance with API access</li>\
                    <li>Replicate API key</li>\
                    <li>OpenAI or other AI model access</li>\
                </ul>\
            </div>\
            \
            <div class="controls">\
                <div class="control-group">\
                    <label for="n8nUrl">n8n Webhook URL:</label>\
                    <input type="url" id="n8nUrl" placeholder="https://your-n8n.com/webhook/crossword" />\
                </div>\
                <div class="control-group">\
                    <label for="replicateKey">Replicate API Key:</label>\
                    <input type="password" id="replicateKey" placeholder="r8_..." />\
                </div>\
                <div class="control-group">\
                    <label for="gridSize">Grid Size:</label>\
                    <select id="gridSize">\
                        <option value="11">11x11 (Easy)</option>\
                        <option value="13">13x13 (Medium)</option>\
                        <option value="15" selected>15x15 (Standard)</option>\
                        <option value="17">17x17 (Large)</option>\
                    </select>\
                </div>\
                <div class="control-group">\
                    <label for="difficulty">Difficulty:</label>\
                    <select id="difficulty">\
                        <option value="easy">Easy</option>\
                        <option value="medium" selected>Medium</option>\
                        <option value="hard">Hard</option>\
                        <option value="expert">Expert</option>\
                    </select>\
                </div>\
            </div>\
            \
            <div class="control-group">\
                <label for="theme">Theme (optional):</label>\
                <input type="text" id="theme" placeholder="e.g., Movies, Science, Sports..." />\
            </div>\
            \
            <div class="control-group" style="margin-top: 15px;">\
                <label for="customWords">Custom Words (one per line):</label>\
                <textarea id="customWords" rows="4" placeholder="EXAMPLE&#10;CROSSWORD&#10;PUZZLE&#10;GENERATOR"></textarea>\
            </div>\
            \
            <button onclick="generateCrossword()" id="generateBtn">\
                \uc0\u55357 \u56960  Generate Crossword Puzzle\
            </button>\
        </div>\
\
        <div class="section">\
            <h2>\uc0\u55357 \u56580  n8n Workflow Setup</h2>\
            <p>Here's the complete n8n workflow configuration:</p>\
            \
            <div class="workflow-step">\
                <h4>1. Webhook Trigger</h4>\
                <p>Set up a webhook to receive crossword generation requests</p>\
                <div class="code-block">\
\{\
  "method": "POST",\
  "path": "/webhook/crossword",\
  "responseMode": "responseNode"\
\}\
                </div>\
            </div>\
\
            <div class="workflow-step">\
                <h4>2. Word List Generation (AI)</h4>\
                <p>Use Replicate to generate themed word lists</p>\
                <div class="code-block">\
// Replicate API call\
\{\
  "version": "meta/llama-2-70b-chat",\
  "input": \{\
    "prompt": "Generate 50 words for a \{\{$json.theme\}\} themed crossword puzzle. Words should be 3-15 letters long. Return only the words, one per line, in uppercase.",\
    "max_new_tokens": 500,\
    "temperature": 0.7\
  \}\
\}\
                </div>\
            </div>\
\
            <div class="workflow-step">\
                <h4>3. Grid Layout Algorithm</h4>\
                <p>Process words and create crossword grid layout</p>\
                <div class="code-block">\
// JavaScript function node\
const words = $input.first().json.words.split('\\n');\
const gridSize = $input.first().json.gridSize || 15;\
\
// Crossword generation algorithm\
function generateCrosswordGrid(wordList, size) \{\
  const grid = Array(size).fill().map(() => Array(size).fill(''));\
  const placedWords = [];\
  \
  // Sort words by length (longest first)\
  const sortedWords = wordList.sort((a, b) => b.length - a.length);\
  \
  // Place first word in center\
  const firstWord = sortedWords[0];\
  const startRow = Math.floor(size / 2);\
  const startCol = Math.floor((size - firstWord.length) / 2);\
  \
  for (let i = 0; i < firstWord.length; i++) \{\
    grid[startRow][startCol + i] = firstWord[i];\
  \}\
  \
  placedWords.push(\{\
    word: firstWord,\
    row: startRow,\
    col: startCol,\
    direction: 'across',\
    number: 1\
  \});\
  \
  // Place remaining words\
  let wordNumber = 2;\
  for (let i = 1; i < Math.min(sortedWords.length, 20); i++) \{\
    const word = sortedWords[i];\
    const placement = findBestPlacement(grid, word, placedWords, size);\
    \
    if (placement) \{\
      placeWord(grid, word, placement);\
      placement.number = wordNumber++;\
      placedWords.push(placement);\
    \}\
  \}\
  \
  return \{ grid, placedWords \};\
\}\
\
return \{ grid: generateCrosswordGrid(words, gridSize) \};\
                </div>\
            </div>\
\
            <div class="workflow-step">\
                <h4>4. Clue Generation (AI)</h4>\
                <p>Generate intelligent clues for each word</p>\
                <div class="code-block">\
// For each placed word, generate a clue\
\{\
  "version": "meta/llama-2-70b-chat",\
  "input": \{\
    "prompt": "Create a \{\{$json.difficulty\}\} crossword clue for the word '\{\{$json.word\}\}'. The clue should be clever but fair. Return only the clue text.",\
    "max_new_tokens": 100,\
    "temperature": 0.8\
  \}\
\}\
                </div>\
            </div>\
\
            <div class="workflow-step">\
                <h4>5. Response Formatter</h4>\
                <p>Format the final crossword puzzle data</p>\
                <div class="code-block">\
\{\
  "puzzle": \{\
    "grid": "\{\{$json.grid\}\}",\
    "size": "\{\{$json.gridSize\}\}",\
    "clues": \{\
      "across": "\{\{$json.acrossClues\}\}",\
      "down": "\{\{$json.downClues\}\}"\
    \},\
    "metadata": \{\
      "theme": "\{\{$json.theme\}\}",\
      "difficulty": "\{\{$json.difficulty\}\}",\
      "created": "\{\{$now\}\}"\
    \}\
  \}\
\}\
                </div>\
            </div>\
        </div>\
\
        <div class="section">\
            <h2>\uc0\u55357 \u56523  Generated Crossword</h2>\
            <div id="status" class="status" style="display: none;"></div>\
            \
            <div id="crosswordContainer" style="display: none;">\
                <div id="crosswordGrid" class="crossword-grid"></div>\
                \
                <div class="clues">\
                    <div class="clue-section">\
                        <h3>Across</h3>\
                        <div id="acrossClues"></div>\
                    </div>\
                    <div class="clue-section">\
                        <h3>Down</h3>\
                        <div id="downClues"></div>\
                    </div>\
                </div>\
            </div>\
        </div>\
\
        <div class="section">\
            <h2>\uc0\u55357 \u56588  API Integration Code</h2>\
            <p>Use this code to integrate the crossword generator into your applications:</p>\
            \
            <div class="code-block">\
// JavaScript/Node.js integration\
async function generateCrossword(config) \{\
  const response = await fetch('YOUR_N8N_WEBHOOK_URL', \{\
    method: 'POST',\
    headers: \{\
      'Content-Type': 'application/json',\
    \},\
    body: JSON.stringify(\{\
      theme: config.theme,\
      difficulty: config.difficulty,\
      gridSize: config.gridSize,\
      customWords: config.customWords\
    \})\
  \});\
  \
  const puzzle = await response.json();\
  return puzzle;\
\}\
\
// Python integration\
import requests\
\
def generate_crossword(config):\
    response = requests.post('YOUR_N8N_WEBHOOK_URL', json=\{\
        'theme': config['theme'],\
        'difficulty': config['difficulty'],\
        'gridSize': config['gridSize'],\
        'customWords': config['customWords']\
    \})\
    return response.json()\
            </div>\
        </div>\
    </div>\
\
    <script>\
        // Sample crossword data for demo\
        const samplePuzzle = \{\
            grid: [\
                ['', '', '', 'C', 'A', 'T', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', 'O', '', 'E', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', 'D', '', 'S', '', '', '', '', '', '', '', '', ''],\
                ['D', 'O', 'G', 'E', '', 'T', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\
                ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']\
            ],\
            clues: \{\
                across: [\
                    \{ number: 1, clue: "Feline pet", answer: "CAT" \},\
                    \{ number: 4, clue: "Canine companion", answer: "DOG" \}\
                ],\
                down: [\
                    \{ number: 1, clue: "Programming instructions", answer: "CODE" \},\
                    \{ number: 2, clue: "Trial or examination", answer: "TEST" \}\
                ]\
            \}\
        \};\
\
        async function generateCrossword() \{\
            const btn = document.getElementById('generateBtn');\
            const status = document.getElementById('status');\
            const container = document.getElementById('crosswordContainer');\
            \
            btn.disabled = true;\
            btn.textContent = '\uc0\u9203  Generating...';\
            \
            status.style.display = 'block';\
            status.className = 'status loading';\
            status.textContent = 'Connecting to n8n workflow and AI services...';\
            \
            try \{\
                // Get form values\
                const config = \{\
                    n8nUrl: document.getElementById('n8nUrl').value,\
                    replicateKey: document.getElementById('replicateKey').value,\
                    gridSize: parseInt(document.getElementById('gridSize').value),\
                    difficulty: document.getElementById('difficulty').value,\
                    theme: document.getElementById('theme').value,\
                    customWords: document.getElementById('customWords').value\
                \};\
\
                // Validate required fields\
                if (!config.n8nUrl) \{\
                    throw new Error('n8n Webhook URL is required');\
                \}\
\
                // Simulate API call delay\
                await new Promise(resolve => setTimeout(resolve, 2000));\
                \
                // In a real implementation, you would call your n8n webhook:\
                /*\
                const response = await fetch(config.n8nUrl, \{\
                    method: 'POST',\
                    headers: \{\
                        'Content-Type': 'application/json',\
                        'Authorization': `Bearer $\{config.replicateKey\}`\
                    \},\
                    body: JSON.stringify(config)\
                \});\
                \
                if (!response.ok) \{\
                    throw new Error(`HTTP $\{response.status\}: $\{response.statusText\}`);\
                \}\
                \
                const puzzle = await response.json();\
                */\
                \
                // For demo purposes, use sample data\
                const puzzle = samplePuzzle;\
                \
                status.className = 'status success';\
                status.textContent = '\uc0\u9989  Crossword generated successfully!';\
                \
                displayCrossword(puzzle);\
                container.style.display = 'block';\
                \
            \} catch (error) \{\
                status.className = 'status error';\
                status.textContent = `\uc0\u10060  Error: $\{error.message\}`;\
                console.error('Generation error:', error);\
            \} finally \{\
                btn.disabled = false;\
                btn.textContent = '\uc0\u55357 \u56960  Generate Crossword Puzzle';\
            \}\
        \}\
\
        function displayCrossword(puzzle) \{\
            const gridContainer = document.getElementById('crosswordGrid');\
            const acrossContainer = document.getElementById('acrossClues');\
            const downContainer = document.getElementById('downClues');\
            \
            // Clear previous content\
            gridContainer.innerHTML = '';\
            acrossContainer.innerHTML = '';\
            downContainer.innerHTML = '';\
            \
            // Create grid\
            const gridSize = puzzle.grid.length;\
            gridContainer.style.gridTemplateColumns = `repeat($\{gridSize\}, 30px)`;\
            gridContainer.style.gridTemplateRows = `repeat($\{gridSize\}, 30px)`;\
            \
            for (let row = 0; row < gridSize; row++) \{\
                for (let col = 0; col < gridSize; col++) \{\
                    const cell = document.createElement('div');\
                    cell.className = 'grid-cell';\
                    \
                    const letter = puzzle.grid[row][col];\
                    if (letter === '') \{\
                        cell.className += ' black';\
                    \} else \{\
                        cell.textContent = letter;\
                        // Add numbers for word starts (simplified)\
                        if ((row === 0 && col === 3) || (row === 3 && col === 0)) \{\
                            cell.className += ' numbered';\
                            cell.setAttribute('data-number', row === 0 ? '1' : '4');\
                        \}\
                        if ((row === 0 && col === 3) || (row === 0 && col === 5)) \{\
                            cell.className += ' numbered';\
                            cell.setAttribute('data-number', col === 3 ? '1' : '2');\
                        \}\
                    \}\
                    \
                    gridContainer.appendChild(cell);\
                \}\
            \}\
            \
            // Display clues\
            puzzle.clues.across.forEach(clue => \{\
                const clueDiv = document.createElement('div');\
                clueDiv.className = 'clue-item';\
                clueDiv.innerHTML = `<strong>$\{clue.number\}.</strong> $\{clue.clue\}`;\
                acrossContainer.appendChild(clueDiv);\
            \});\
            \
            puzzle.clues.down.forEach(clue => \{\
                const clueDiv = document.createElement('div');\
                clueDiv.className = 'clue-item';\
                clueDiv.innerHTML = `<strong>$\{clue.number\}.</strong> $\{clue.clue\}`;\
                downContainer.appendChild(clueDiv);\
            \});\
        \}\
\
        // Initialize with sample data for demo\
        document.addEventListener('DOMContentLoaded', function() \{\
            // Pre-fill some demo values\
            document.getElementById('n8nUrl').value = 'https://your-n8n-instance.com/webhook/crossword';\
            document.getElementById('theme').value = 'Technology';\
            document.getElementById('customWords').value = 'JAVASCRIPT\\nREACT\\nNODEJS\\nPYTHON';\
        \});\
    </script>\
</body>\
</html>}